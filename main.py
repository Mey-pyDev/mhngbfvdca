import disnake  # https://ru.guide.disnake.dev/interactions/slash-commands
from disnake.ext import commands, tasks
import datetime
import asyncio
import random
import requests
import os
from googletrans import Translator
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

intents = disnake.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

command_sync_flags = commands.CommandSyncFlags.default()
command_sync_flags.sync_commands_debug = True

bot = commands.Bot(command_prefix='-', command_sync_flags=command_sync_flags, intents=intents)

tracker_list = [
    {'emoji': '‚åö', 'name': '**Upwork** Pavlo', 'status': None, 'message_id': None},
    {'emoji': '‚åö', 'name': '**Upwork** Artem', 'status': None, 'message_id': None},
    {'emoji': '‚åö', 'name': '**Hubstuff** Pavlo', 'status': None, 'message_id': None},
    {'emoji': '‚åö', 'name': '**Hubstuff** "SoundBox"', 'status': None, 'message_id': None},
    {'emoji': '‚åö', 'name': '**Clockify**', 'status': None, 'message_id': None},
    {'emoji': '‚åö', 'name': '**Hubstuff** Varvara', 'status': None, 'message_id': None}
]

magic_ball_responses = ["–ë–µ–∑—Å—É–º–Ω—ñ–≤–Ω–æ", "–í–∏—Ä—ñ—à–µ–Ω–æ", "–ù—ñ—è–∫–∏—Ö —Å—É–º–Ω—ñ–≤—ñ–≤", "–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Ç–∞–∫", "–ú–æ–∂–µ—à –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É —Ü—å–æ–º—É",
                        "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è ‚Äî ¬´—Ç–∞–∫¬ª", "–°–∫–æ—Ä—ñ—à –∑–∞ –≤—Å–µ", "–•–æ—Ä–æ—à—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç—å ‚Äî ¬´—Ç–∞–∫¬ª", "–¢–∞–∫",
                        "–ó–∞—Ä–∞–∑ –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è —ñ —Å–ø–∏—Ç–∞–π –∑–Ω–æ–≤—É", "–ù–∞–≤—ñ—Ç—å –Ω–µ –¥—É–º–∞–π",
                        "–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî ¬´–Ω—ñ¬ª", "–ó–∞ –º–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏ ‚Äî ¬´–Ω—ñ¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –Ω–µ –¥—É–∂–µ —Ö–æ—Ä–æ—à—ñ",
                        "–î—É–∂–µ —Å—É–º–Ω—ñ–≤–Ω–æ", "–ú–æ–∂–ª–∏–≤–æ —Ç–∞–∫, –º–æ–∂–ª–∏–≤–æ –Ω—ñ", "–ú–æ–∂–ª–∏–≤–æ —É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –≤—Å–µ—Å–≤—ñ—Ç—ñ", "üëç", "üëé"]

magic_ball_chumba = ['', ', –ß—É–º–±–∞']


@bot.slash_command(description="–ó–∞–ø–∏—Ç–∞–π –º–∞–≥—ñ—á–Ω—É –∫—É–ª—é (–ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–∞–∫/–Ω—ñ)")
async def magicball(inter, question: str):
    response = random.choice(magic_ball_responses)
    ischumba = random.choice(magic_ball_chumba)
    await inter.response.send_message(f"*{question.strip('?')}?*\n–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: **{response}{ischumba}**")

translator = Translator()

@bot.message_command(name="Text ü†í Ru")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='ru')

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
        publish_button = disnake.ui.Button(label="–¶–µ–π –ø–µ—Ä–µ–∫–ª–∞–¥ –±–∞—á–∏—Ç–µ –ª–∏—à–µ –í–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç, —â–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –≤ —á–∞—Ç", style=disnake.ButtonStyle.blurple)
        delete_button = disnake.ui.Button(label="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", style=disnake.ButtonStyle.red)

        async def publish_callback(button_interaction):
            await inter.channel.send(f"**Text ü†í Ru:**\n\n{translated.text}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await button_interaction.response.edit_message(content="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", view=None)
            await button_interaction.delete_original_message()

        async def delete_callback(button_interaction):
            await button_interaction.response.edit_message(content="–ü–µ—Ä–µ–∫–ª–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ", view=None)
            await button_interaction.delete_original_message()  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


        publish_button.callback = publish_callback
        delete_button.callback = delete_callback

        view = disnake.ui.View()
        view.add_item(delete_button)
        view.add_item(publish_button)


        await inter.response.send_message(f"{translated.text}\n.", view=view, ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <@236912374685106176>", ephemeral=True)

@bot.message_command(name="Text ü†í Ua")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='uk')

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
        publish_button = disnake.ui.Button(label="–¶–µ–π –ø–µ—Ä–µ–∫–ª–∞–¥ –±–∞—á–∏—Ç–µ –ª–∏—à–µ –í–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç, —â–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –≤ —á–∞—Ç", style=disnake.ButtonStyle.blurple)
        delete_button = disnake.ui.Button(label="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", style=disnake.ButtonStyle.red)

        async def publish_callback(button_interaction):
            await inter.channel.send(f"**Text ü†í Ua:**\n\n{translated.text}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await button_interaction.response.edit_message(content="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", view=None)
            await button_interaction.delete_original_message()

        async def delete_callback(button_interaction):
            await button_interaction.response.edit_message(content="–ü–µ—Ä–µ–∫–ª–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ", view=None)
            await button_interaction.delete_original_message()  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


        delete_button.callback = delete_callback
        publish_button.callback = publish_callback

        view = disnake.ui.View()
        view.add_item(delete_button)
        view.add_item(publish_button)

        await inter.response.send_message(f"{translated.text}\n.", view=view, ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <@236912374685106176>", ephemeral=True)

@bot.message_command(name="Text ü†í Eng")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
        publish_button = disnake.ui.Button(label="–¶–µ–π –ø–µ—Ä–µ–∫–ª–∞–¥ –±–∞—á–∏—Ç–µ –ª–∏—à–µ –í–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç, —â–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –≤ —á–∞—Ç", style=disnake.ButtonStyle.blurple)
        delete_button = disnake.ui.Button(label="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", style=disnake.ButtonStyle.red)

        async def publish_callback(button_interaction):
            await inter.channel.send(f"**Text ü†í Eng:**\n\n{translated.text}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await button_interaction.response.edit_message(content="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", view=None)
            await button_interaction.delete_original_message()

        async def delete_callback(button_interaction):
            await button_interaction.response.edit_message(content="–ü–µ—Ä–µ–∫–ª–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ", view=None)
            await button_interaction.delete_original_message()  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        publish_button.callback = publish_callback
        delete_button.callback = delete_callback

        view = disnake.ui.View()
        view.add_item(delete_button)
        view.add_item(publish_button)

        await inter.response.send_message(f"{translated.text}\n.", view=view, ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <@236912374685106176>", ephemeral=True)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        await bot.tree.sync()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
        print("Slash commands have been synchronized.")
    except Exception as e:
        print(f"Error during command synchronization: {e}")
    scheduler = AsyncIOScheduler()
    timezone = pytz.timezone('Europe/Kiev')
    trigger = CronTrigger(day_of_week='mon-fri', hour=7, minute=00, timezone=timezone)
    scheduler.add_job(daily_tracker, trigger)
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 07:00 –ø–Ω-–ø—Ç")


@bot.slash_command(description="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏")
async def weather(inter, city: str = 'Dnipro'):
    api_key = os.getenv("WEATHER_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url).json()

    if response.get("main"):

        temp = response["main"]["temp"]
        description = response["weather"][0]["description"]
        sunset = datetime.datetime.fromtimestamp(response["sys"]["sunset"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        sunrise = datetime.datetime.fromtimestamp(response["sys"]["sunrise"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        wind = response['wind']["speed"]
        clouds = response["clouds"]["all"]
        dt = datetime.datetime.fromtimestamp(response["dt"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        country = response["sys"]["country"]
        city = response["name"]
        icon_url = f"http://openweathermap.org/img/wn/{response['weather'][0]['icon']}@2x.png"

        embed = disnake.Embed(title=f"**{city} :flag_{country.lower()}:**")
        embed.set_thumbnail(url=icon_url)
        embed.add_field(name="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{temp}¬∞C", inline=True)
        embed.add_field(name="‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å", value=f"{clouds}%", inline=True)
        embed.add_field(name="üå¨Ô∏è –í—ñ—Ç–µ—Ä", value=f"{wind}m/s", inline=True)
        embed.add_field(name="üïíÔ∏è –ú—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å", value=f"{dt}", inline=True)
        embed.add_field(name="‚òÄÔ∏è –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è", value=f"{sunrise}", inline=True)
        embed.add_field(name="üåë –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è", value=f"{sunset}", inline=True)

        await inter.response.send_message(embed=embed)
    else:
        await inter.response.send_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ {city}")


@bot.slash_command(description="–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç")
async def joke(inter):
    url = "https://v2.jokeapi.dev/joke/Any"
    response = requests.get(url).json()
    if response["type"] == "single":
        joke = response["joke"]
    else:
        joke = f"{response['setup']}\n{response['delivery']}"
    await inter.response.send_message(joke)


@bot.slash_command(name='tracker', description='–í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä—ñ–≤')
async def tracker(inter):
    await inter.response.defer()
    for tracker in tracker_list:
        message = await inter.channel.send(f"`üü¢` {tracker['name']} –∑–∞—Ä–∞–∑ –≤—ñ–ª—å–Ω–∏–π\n", delete_after=64800) #18h
        tracker['message_id'] = message.id
        await message.add_reaction(tracker['emoji'])
    await inter.send(content="–†—É—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ - –û–Ω–æ–≤–ª—é—é —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä—ñ–≤", ephemeral=False)


async def process_reaction(payload, add):
    guild = bot.get_guild(payload.guild_id)
    channel = guild.get_channel(payload.channel_id)
    message = await channel.fetch_message(payload.message_id)
    user = guild.get_member(payload.user_id)

    if user is None or user.bot:
        return

    if message.author != bot.user:
        return

    thread = await get_or_create_thread(channel, "–∑–≤—ñ—Ç")
    timezone = pytz.timezone('Europe/Kiev')
    current_time = datetime.datetime.now(timezone).strftime("%H:%M")

    for tracker in tracker_list:
        if payload.message_id == tracker.get('message_id') and str(payload.emoji) == tracker['emoji']:
            if add:
                if tracker['status'] is None:
                    tracker['status'] = user
                    await message.edit(content=f"`üî¥` {tracker['name']} –∑–∞–π–Ω—è–≤(–ª–∞) {user.mention} –æ {current_time}\n")
                    await thread.send(f'{current_time} - {user.mention} –∑–∞—Ä–∞–∑ –Ω–∞ —Ç—Ä–µ–∫–µ—Ä—ñ {tracker["name"]}')

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
                    one_hour_button = disnake.ui.Button(label="1", style=disnake.ButtonStyle.gray)
                    two_hours_button = disnake.ui.Button(label="2", style=disnake.ButtonStyle.gray)
                    three_hours_button = disnake.ui.Button(label="3", style=disnake.ButtonStyle.gray)
                    four_hours_button = disnake.ui.Button(label="4", style=disnake.ButtonStyle.gray)
                    five_hours_button = disnake.ui.Button(label="5", style=disnake.ButtonStyle.gray)
                    # six_hours_button = disnake.ui.Button(label="6", style=disnake.ButtonStyle.gray)
                    # seven_hours_button = disnake.ui.Button(label="7", style=disnake.ButtonStyle.gray)
                    # eight_hours_button = disnake.ui.Button(label="8", style=disnake.ButtonStyle.gray)

                    name_for_update = user.name
                    id_for_update = tracker.get('message_id')
                    trackername = tracker.get('name')

                    async def one_hour_callback(button_interaction):
                        await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 1)
                        await button_interaction.response.defer()  # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        await button_interaction.delete_original_message()  # –£–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ

                    async def two_hours_callback(button_interaction):
                        await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 2)
                        await button_interaction.response.defer()  # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        await button_interaction.delete_original_message()  # –£–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ

                    async def three_hours_callback(button_interaction):
                        await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 3)
                        await button_interaction.response.defer()  # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        await button_interaction.delete_original_message()  # –£–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ

                    async def four_hours_callback(button_interaction):
                        await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 4)
                        await button_interaction.response.defer()  # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                        await button_interaction.delete_original_message()  # –£–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ

                    async def five_hours_callback(button_interaction):
                        await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 5)
                        await button_interaction.response.defer()
                        await button_interaction.delete_original_message()

                    # async def six_hours_callback(button_interaction):
                    #     await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 6)
                    #     await button_interaction.response.defer()
                    #     await button_interaction.delete_original_message()
                    #
                    # async def seven_hours_callback(button_interaction):
                    #     await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 7)
                    #     await button_interaction.response.defer()
                    #     await button_interaction.delete_original_message()
                    #
                    # async def eight_hours_callback(button_interaction):
                    #     await update_tracker_time(button_interaction, name_for_update, id_for_update, trackername, 8)
                    #     await button_interaction.response.defer()
                    #     await button_interaction.delete_original_message()

                    one_hour_button.callback = one_hour_callback
                    two_hours_button.callback = two_hours_callback
                    three_hours_button.callback = three_hours_callback
                    four_hours_button.callback = four_hours_callback
                    five_hours_button.callback = five_hours_callback
                    # six_hours_button.callback = six_hours_callback
                    # seven_hours_button.callback = seven_hours_callback
                    # eight_hours_button.callback = eight_hours_button

                    view = disnake.ui.View()
                    view.add_item(one_hour_button)
                    view.add_item(two_hours_button)
                    view.add_item(three_hours_button)
                    view.add_item(four_hours_button)
                    view.add_item(five_hours_button)

                    # view.add_item(six_hours_button)
                    # view.add_item(seven_hours_button)
                    # view.add_item(eight_hours_button)

                    await channel.send(f"–®–∞–Ω–æ–≤–Ω–∏–π(–∞) {user.mention}, –∑–Ω–∞—î—Ç–µ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ) –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –∑–∞–π–º–µ—Ç–µ {trackername}? \n–°–∫–∞–∂—ñ—Ç—å —ñ–Ω—à–∏–º –∞–±–∏ –í–æ–Ω–∏ —Å–ø–ª–∞–Ω—É–≤–∞–ª–∏ —Å–≤i–π —á–∞—Å ü§ù",
                                       view=view, delete_after=15)
            else:
                if tracker['status'] == user:
                    if '**Upwork**' in tracker['name']:
                        upwork_time = current_time
                        tracker['status'] = None
                        await message.edit(content=f"`üü°` {tracker['name']} –≤—ñ–ª—å–Ω–∏–π –∑ {current_time}, –∞–ª–µ –∑–∞—á–µ–∫–∞–π —â–µ ~10 —Ö–≤–∏–ª–∏–Ω")
                        await thread.send(f'{current_time} - {user.mention} –∑–≤—ñ–ª—å–Ω–∏–≤(–ª–∞) —Ç—Ä–µ–∫–µ—Ä {tracker["name"]}')

                        await asyncio.sleep(600)
                        if tracker['status'] is None:
                            await message.edit(content=f"`üü¢` {tracker['name']} –≤—ñ–ª—å–Ω–∏–π –∑ {upwork_time}\n")
                    else:
                        tracker['status'] = None
                        await message.edit(content=f"`üü¢` {tracker['name']} –≤—ñ–ª—å–Ω–∏–π –∑ {current_time}\n")
                        await thread.send(f'{current_time} - {user.mention} –∑–≤—ñ–ª—å–Ω–∏–≤(–ª–∞) —Ç—Ä–µ–∫–µ—Ä {tracker["name"]}')


async def update_tracker_time(interaction, name, msgid, trackername, hours):
    user = interaction.user
    msg_id = msgid
    trackername = trackername

    if name == user.name:
        timezone = pytz.timezone('Europe/Kiev')
        current_time = datetime.datetime.now(timezone)
        end_time = (current_time + datetime.timedelta(hours=hours)).strftime("%H:%M")

        original_message = await interaction.channel.fetch_message(msg_id)
        await original_message.edit(content=f"`üî¥` {trackername} –∑–∞–π–Ω—è–≤(–ª–∞) {user.mention} –æ {current_time.strftime('%H:%M')}, –ø—Ä–∏–±–ª–∏–∑–Ω–æ –¥–æ {end_time}")
    else:
        await interaction.response.send_message("–¢—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π –∑–∞–π–Ω—è–≤ —Ç—Ä–µ–∫–µ—Ä, –º–æ–∂–µ –≤–∫–∞–∑–∞—Ç–∏ —á–∞—Å", ephemeral=True, delete_after=5)

async def get_or_create_thread(channel, thread_name):
    for thread in channel.threads:
        if thread.name == thread_name:
            return thread
    thread = await channel.create_thread(name=thread_name, type=disnake.ChannelType.public_thread)
    return thread

async def daily_tracker():
    channel = bot.get_channel(1218888187087421453)  #ID —Ç—Ä–µ–∫–µ—Ä–Ω—ã–π-–¥–≤–∏–∂
    if channel:
        for tracker in tracker_list:
            message = await channel.send(f"`üü¢` {tracker['name']} –∑–∞—Ä–∞–∑ –≤—ñ–ª—å–Ω–∏–π\n", delete_after=64800)
            tracker['message_id'] = message.id
            await message.add_reaction(tracker['emoji'])

@bot.event
async def on_raw_reaction_add(payload):
    await process_reaction(payload, True)


@bot.event
async def on_raw_reaction_remove(payload):
    await process_reaction(payload, False)


bot.run(os.getenv("TOKEN"))
