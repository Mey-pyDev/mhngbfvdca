import disnake  # https://ru.guide.disnake.dev/interactions/slash-commands
from disnake.ext import commands, tasks
import datetime
import asyncio
import random
import requests
import os
from googletrans import Translator

intents = disnake.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

command_sync_flags = commands.CommandSyncFlags.default()
command_sync_flags.sync_commands_debug = True

bot = commands.Bot(command_prefix='-', command_sync_flags=command_sync_flags, intents=intents)

items = [{'emoji': '‚åö', 'name': '**Upwork** Pavlo', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Upwork** Artem', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** Pavlo', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** "SoundBox"', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Clockify**', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** Varvara', 'status': None, 'message_id': None}]

magic_ball_responses = ["–ë–µ—Å—Å–ø–æ—Ä–Ω–æ", "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ", "–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞", "–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
                        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª", "–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ", "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª", "–î–∞",
                        "–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å", "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π",
                        "–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ",
                        "–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"]

magic_ball_chumba = ['', ', –ß—É–º–±–∞']


@bot.slash_command(description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É")
async def magicball(inter, question: str):
    response = random.choice(magic_ball_responses)
    ischumba = random.choice(magic_ball_chumba)
    await inter.response.send_message(f"*{question.capitalize().strip('?')}?*\n–ú–æ–π –æ—Ç–≤–µ—Ç: **{response}{ischumba}**")


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        await bot.tree.sync()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
        print("Slash commands have been synchronized.")
    except Exception as e:
        print(f"Error during command synchronization: {e}")


@bot.slash_command(description="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def weather(inter, city: str = 'Dnipro'):
    api_key = os.getenv("WEATHER_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url).json()

    if response.get("main"):

        temp = response["main"]["temp"]
        description = response["weather"][0]["description"]
        sunset = datetime.datetime.fromtimestamp(response["sys"]["sunset"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        sunrise = datetime.datetime.fromtimestamp(response["sys"]["sunrise"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        wind = response['wind']["speed"]
        clouds = response["clouds"]["all"]
        dt = datetime.datetime.fromtimestamp(response["dt"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        country = response["sys"]["country"]
        city = response["name"]
        icon_url = f"http://openweathermap.org/img/wn/{response['weather'][0]['icon']}@2x.png"

        embed = disnake.Embed(title=f"**{city} :flag_{country.lower()}:**")
        embed.set_thumbnail(url=icon_url)
        embed.add_field(name="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{temp}¬∞C", inline=True)
        embed.add_field(name="‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å", value=f"{clouds}%", inline=True)
        embed.add_field(name="üå¨Ô∏è –í–µ—Ç–µ—Ä", value=f"{wind}m/s", inline=True)
        embed.add_field(name="üïíÔ∏è –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è", value=f"{dt}", inline=True)
        embed.add_field(name="‚òÄÔ∏è –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞", value=f"{sunrise}", inline=True)
        embed.add_field(name="üåë –ó–∞–∫–∞—Ç", value=f"{sunset}", inline=True)

        await inter.response.send_message(embed=embed)
    else:
        await inter.response.send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")


@bot.slash_command(description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É")
async def joke(inter):
    url = "https://v2.jokeapi.dev/joke/Any"
    response = requests.get(url).json()
    if response["type"] == "single":
        joke = response["joke"]
    else:
        joke = f"{response['setup']}\n{response['delivery']}"
    await inter.response.send_message(joke)


@bot.slash_command(name='tracker', description='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤')
async def items_command(inter):
    await inter.response.defer()
    for item in items:
        message = await inter.channel.send(f"`üü¢` {item['name']} —Å–≤–æ–±–æ–¥–µ–Ω\n", delete_after=57600)
        item['message_id'] = message.id
        await message.add_reaction(item['emoji'])
    # await inter.send(content="Tracker list ‚Üì\n\n", ephemeral=False)


# async def delete_message_after_delay(channel, message, delay):
#     await asyncio.sleep(delay)
#     await message.delete()

async def process_reaction(payload, add):
    guild = bot.get_guild(payload.guild_id)
    channel = guild.get_channel(payload.channel_id)
    message = await channel.fetch_message(payload.message_id)
    user = guild.get_member(payload.user_id)

    if user is None or user.bot:
        return

    if message.author != bot.user:
        return

    for item in items:
        if payload.message_id == item.get('message_id') and str(payload.emoji) == item['emoji']:
            if add:
                if item['status'] is None:
                    # –ó–∞–Ω–∏–º–∞–µ–º
                    item['status'] = user
                    await message.edit(content=f"`üî¥` {item['name']} –∑–∞–Ω—è—Ç {user.mention}\n")
                    await channel.send(f'{user.mention} —Å–µ–π—á–∞—Å –Ω–∞ —Ç—Ä–µ–∫–µ—Ä–µ {item["name"]}', delete_after=900)

                else:
                    # –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    await channel.send(f'{user.mention}, —ç—Ç–æ—Ç —Ç—Ä–µ–∫–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç {item["status"].mention}.',
                                       delete_after=5)
                    await message.remove_reaction(payload.emoji, user)
            else:
                if item['status'] == user:
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º
                    item['status'] = None
                    await message.edit(content=f"`üü¢` {item['name']} —Å–≤–æ–±–æ–¥–µ–Ω\n")
                    await channel.send(f'{user.mention} –≤—ã—à–µ–ª —Å —Ç—Ä–µ–∫–µ—Ä–∞ {item["name"]}', delete_after=900)

translator = Translator()

@bot.message_command(name="Text ü†í English")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')
        await inter.response.send_message(f"{translated.text}", ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

@bot.message_command(name="Text ü†í Ru")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='ru')
        await inter.response.send_message(f"{translated.text}", ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

@bot.message_command(name="üìÑ Translate to English")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')
        await message.add_reaction("üìÑ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await inter.response.send_message(f"{translated.text}")
    except Exception as e:
        await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

@bot.message_command(name="üìÑ Translate to Ukrainian")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='uk')
        await message.add_reaction("üìÑ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await inter.response.send_message(f"{translated.text}")
    except Exception as e:
        await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")

@bot.message_command(name="üìÑ Translate to Ru")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')
        await message.add_reaction("üìÑ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await inter.response.send_message(f"{translated.text}")
    except Exception as e:
        await inter.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")


@bot.event
async def on_raw_reaction_add(payload):
    await process_reaction(payload, True)


@bot.event
async def on_raw_reaction_remove(payload):
    await process_reaction(payload, False)


bot.run(os.getenv("TOKEN"))
