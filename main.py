import disnake  # https://ru.guide.disnake.dev/interactions/slash-commands
from disnake.ext import commands, tasks
import datetime
import asyncio
import random
import requests
import os
from googletrans import Translator
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

intents = disnake.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

command_sync_flags = commands.CommandSyncFlags.default()
command_sync_flags.sync_commands_debug = True

bot = commands.Bot(command_prefix='-', command_sync_flags=command_sync_flags, intents=intents)

items = [{'emoji': '‚åö', 'name': '**Upwork** Pavlo', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Upwork** Artem', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** Pavlo', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** "SoundBox"', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Clockify**', 'status': None, 'message_id': None},
         {'emoji': '‚åö', 'name': '**Hubstuff** Varvara', 'status': None, 'message_id': None}]

magic_ball_responses = ["–ë–µ–∑—Å—É–º–Ω—ñ–≤–Ω–æ", "–í–∏—Ä—ñ—à–µ–Ω–æ", "–ù—ñ—è–∫–∏—Ö —Å—É–º–Ω—ñ–≤—ñ–≤", "–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Ç–∞–∫", "–ú–æ–∂–µ—à –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É —Ü—å–æ–º—É",
                        "–ú–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è ‚Äî ¬´—Ç–∞–∫¬ª", "–°–∫–æ—Ä—ñ—à –∑–∞ –≤—Å–µ", "–•–æ—Ä–æ—à—ñ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏", "–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç—å ‚Äî ¬´—Ç–∞–∫¬ª", "–¢–∞–∫",
                        "–ó–∞—Ä–∞–∑ –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä—É–π—Å—è —ñ —Å–ø–∏—Ç–∞–π –∑–Ω–æ–≤—É", "–ù–∞–≤—ñ—Ç—å –Ω–µ –¥—É–º–∞–π",
                        "–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî ¬´–Ω—ñ¬ª", "–ó–∞ –º–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏ ‚Äî ¬´–Ω—ñ¬ª", "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∏ –Ω–µ –¥—É–∂–µ —Ö–æ—Ä–æ—à—ñ",
                        "–î—É–∂–µ —Å—É–º–Ω—ñ–≤–Ω–æ", "–ú–æ–∂–ª–∏–≤–æ —Ç–∞–∫, –º–æ–∂–ª–∏–≤–æ –Ω—ñ", "–ú–æ–∂–ª–∏–≤–æ —É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –≤—Å–µ—Å–≤—ñ—Ç—ñ", "üëç", "üëé"]

magic_ball_chumba = ['', ', –ß—É–º–±–∞']


@bot.slash_command(description="–ó–∞–ø–∏—Ç–∞–π –º–∞–≥—ñ—á–Ω—É –∫—É–ª—é (–ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ —Ç–∞–∫/–Ω—ñ)")
async def magicball(inter, question: str):
    response = random.choice(magic_ball_responses)
    ischumba = random.choice(magic_ball_chumba)
    await inter.response.send_message(f"*{question.strip('?')}?*\n–ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: **{response}{ischumba}**")


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        await bot.tree.sync()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
        print("Slash commands have been synchronized.")
    except Exception as e:
        print(f"Error during command synchronization: {e}")
    scheduler = AsyncIOScheduler()
    trigger = CronTrigger(day_of_week='mon-fri', hour=22, minute=34)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (9:00 —É—Ç—Ä–∞)
    scheduler.add_job(daily_tracker, trigger)
    scheduler.start()


@bot.slash_command(description="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏")
async def weather(inter, city: str = 'Dnipro'):
    api_key = os.getenv("WEATHER_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url).json()

    if response.get("main"):

        temp = response["main"]["temp"]
        description = response["weather"][0]["description"]
        sunset = datetime.datetime.fromtimestamp(response["sys"]["sunset"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        sunrise = datetime.datetime.fromtimestamp(response["sys"]["sunrise"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        wind = response['wind']["speed"]
        clouds = response["clouds"]["all"]
        dt = datetime.datetime.fromtimestamp(response["dt"], tz=datetime.timezone(
            datetime.timedelta(seconds=response['timezone']))).strftime("%H:%M")
        country = response["sys"]["country"]
        city = response["name"]
        icon_url = f"http://openweathermap.org/img/wn/{response['weather'][0]['icon']}@2x.png"

        embed = disnake.Embed(title=f"**{city} :flag_{country.lower()}:**")
        embed.set_thumbnail(url=icon_url)
        embed.add_field(name="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{temp}¬∞C", inline=True)
        embed.add_field(name="‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å", value=f"{clouds}%", inline=True)
        embed.add_field(name="üå¨Ô∏è –í—ñ—Ç–µ—Ä", value=f"{wind}m/s", inline=True)
        embed.add_field(name="üïíÔ∏è –ú—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å", value=f"{dt}", inline=True)
        embed.add_field(name="‚òÄÔ∏è –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è", value=f"{sunrise}", inline=True)
        embed.add_field(name="üåë –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è", value=f"{sunset}", inline=True)

        await inter.response.send_message(embed=embed)
    else:
        await inter.response.send_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ {city}")


@bot.slash_command(description="–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç")
async def joke(inter, language: str = None):
    if language.lower() in ("ua", "—Ä—ñ–¥–Ω–∞", "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ukr", '—É–∫—Ä', 'uk', 'ukrainian', 'ukraine'):
        url = "https://v2.jokeapi.dev/joke/Any?lang=uk"
    else:
        url = "https://v2.jokeapi.dev/joke/Any"
    response = requests.get(url).json()
    if response["type"] == "single":
        joke = response["joke"]
    else:
        joke = f"{response['setup']}\n{response['delivery']}"
    await inter.response.send_message(joke)


@bot.slash_command(name='tracker', description='–í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä—ñ–≤')
async def items_command(inter):
    await inter.response.defer()
    for item in items:
        message = await inter.channel.send(f"`üü¢` {item['name']} –≤—ñ–ª—å–Ω–∏–π\n", delete_after=72_000)
        item['message_id'] = message.id
        await message.add_reaction(item['emoji'])
    await inter.send(content="‚ïº‚ïº‚ïº‚ïº", ephemeral=False)


# async def delete_message_after_delay(channel, message, delay):
#     await asyncio.sleep(delay)
#     await message.delete()

async def process_reaction(payload, add):
    guild = bot.get_guild(payload.guild_id)
    channel = guild.get_channel(payload.channel_id)
    message = await channel.fetch_message(payload.message_id)
    user = guild.get_member(payload.user_id)

    if user is None or user.bot:
        return

    if message.author != bot.user:
        return

    for item in items:
        if payload.message_id == item.get('message_id') and str(payload.emoji) == item['emoji']:
            if add:
                if item['status'] is None:
                    # –ó–∞–Ω–∏–º–∞–µ–º
                    item['status'] = user
                    await message.edit(content=f"`üî¥` {item['name']} –∑–∞–π–Ω—è–≤(–ª–∞) {user.mention}\n")
                    await channel.send(f'{user.mention} –∑–∞—Ä–∞–∑ –Ω–∞ —Ç—Ä–µ–∫–µ—Ä—ñ {item["name"]}', delete_after=1800)

                # else:
                #     # –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                #     await channel.send(f'{user.mention}, —ç—Ç–æ—Ç —Ç—Ä–µ–∫–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç {item["status"].mention}.',
                #                        delete_after=5)
                #     await message.remove_reaction(payload.emoji, user)
            else:
                if item['status'] == user:
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º
                    item['status'] = None
                    await message.edit(content=f"`üü¢` {item['name']} –∑–∞—Ä–∞–∑ –≤—ñ–ª—å–Ω–∏–π\n")
                    await channel.send(f'{user.mention} –∑–≤—ñ–ª—å–Ω–∏–≤(–ª–∞) —Ç—Ä–µ–∫–µ—Ä {item["name"]}', delete_after=1800)

translator = Translator()

@bot.message_command(name="Text ü†í English üá¨üáß")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')
        await inter.response.send_message(f"{translated.text}", ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")

@bot.message_command(name="Text ü†í Ruüí©")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='ru')
        await inter.response.send_message(f"{translated.text}", ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")

@bot.message_command(name="Text ü†í UA üá∫üá¶")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='uk')
        await inter.response.send_message(f"{translated.text}", ephemeral=True)
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")

@bot.message_command(name="üìÑ Translate & Publish to English")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='en')
        await message.add_reaction("üìÑ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await inter.response.send_message(f"{translated.text}")
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")

@bot.message_command(name="üìÑ Translate & Publish to Ru")
async def translate_message(inter, message: disnake.Message):
    try:
        translated = translator.translate(message.content, dest='ru')
        await message.add_reaction("üìÑ")  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await inter.response.send_message(f"{translated.text}")
    except Exception as e:
        await inter.response.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")


@bot.event
async def on_raw_reaction_add(payload):
    await process_reaction(payload, True)


@bot.event
async def on_raw_reaction_remove(payload):
    await process_reaction(payload, False)


async def daily_tracker():
    channel = bot.get_channel('1014562370317725764')  # –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_CHANNEL_ID –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    if channel:
        for item in items:
            message = await channel.send(f"`üü¢` {item['name']} –≤—ñ–ª—å–Ω–∏–π\n", delete_after=72_000)
            item['message_id'] = message.id
            await message.add_reaction(item['emoji'])


bot.run(os.getenv("TOKEN"))
